{"version":3,"file":"webgl2Pipeline.js","sourceRoot":"","sources":["../../../../lib/processors/webgl2/pipelines/webgl2Pipeline.ts"],"names":[],"mappings":"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","sourcesContent":["import { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport { compileShader, createTexture, glsl } from '../helpers/webglHelper'\nimport {\n  buildBackgroundBlurStage,\n} from './backgroundBlurStage'\nimport {\n  BackgroundImageStage,\n  buildBackgroundImageStage,\n} from './backgroundImageStage'\nimport { buildFastBilateralFilterStage } from './fastBilateralFilterStage'\nimport { buildLoadSegmentationStage } from './loadSegmentationStage'\n\nexport function buildWebGL2Pipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundImage: HTMLImageElement | null,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  benchmark: any,\n  debounce: boolean\n) {\n  let shouldUpscaleCurrentMask = true\n\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas;\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const gl = canvas.getContext('webgl2')!\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n\n  const vertexArray = gl.createVertexArray()\n  gl.bindVertexArray(vertexArray)\n\n  const positionBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  const texCoordBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  // We don't use texStorage2D here because texImage2D seems faster\n  // to upload video texture than texSubImage2D even though the latter\n  // is supposed to be the recommended way:\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_texstorage_to_create_textures\n  const inputFrameTexture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n  // TODO Rename segmentation and person mask to be more specific\n  const segmentationTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    segmentationWidth,\n    segmentationHeight\n  )!\n  const personMaskTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    outputWidth,\n    outputHeight\n  )!\n  const loadSegmentationStage = buildLoadSegmentationStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    segmentationTexture\n  )\n  const fastBilateralFilterStage = buildFastBilateralFilterStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationTexture,\n    segmentationConfig,\n    personMaskTexture,\n    canvas\n  )\n  const backgroundStage =\n    backgroundConfig.type === 'blur'\n      ? buildBackgroundBlurStage(\n          gl,\n          vertexShader,\n          positionBuffer,\n          texCoordBuffer,\n          personMaskTexture,\n          canvas\n        )\n      : buildBackgroundImageStage(\n          gl,\n          positionBuffer,\n          texCoordBuffer,\n          personMaskTexture,\n          backgroundImage,\n          canvas\n        )\n\n  async function sampleInputFrame() {\n    gl.clearColor(0, 0, 0, 0)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n\n    // texImage2D seems faster than texSubImage2D to upload\n    // video texture\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      sourcePlayback.htmlElement\n    )\n\n    gl.bindVertexArray(vertexArray)\n  }\n\n  async function render(segmentationData: Uint8ClampedArray) {\n    benchmark.start('imageCompositionDelay')\n    if (shouldUpscaleCurrentMask) {\n      loadSegmentationStage.render(segmentationData)\n    }\n    fastBilateralFilterStage.render()\n    backgroundStage.render()\n    if (debounce) {\n      shouldUpscaleCurrentMask = !shouldUpscaleCurrentMask\n    }\n    benchmark.end('imageCompositionDelay')\n  }\n\n  function updatePostProcessingConfig(\n    postProcessingConfig: PostProcessingConfig\n  ) {\n    const {\n      blendMode,\n      coverage,\n      lightWrapping,\n      jointBilateralFilter = {}\n    } = postProcessingConfig\n\n    const {\n      sigmaColor,\n      sigmaSpace\n    } = jointBilateralFilter\n\n    if (typeof sigmaColor === 'number') {\n      fastBilateralFilterStage.updateSigmaColor(sigmaColor)\n    }\n    if (typeof sigmaSpace === 'number') {\n      fastBilateralFilterStage.updateSigmaSpace(sigmaSpace)\n    }\n    if (Array.isArray(coverage)) {\n      if (backgroundConfig.type === 'blur' || backgroundConfig.type === 'image') {\n        backgroundStage.updateCoverage(coverage)\n      }\n    }\n    if (backgroundConfig.type === 'image') {\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\n      if (typeof lightWrapping === 'number') {\n        backgroundImageStage.updateLightWrapping(lightWrapping)\n      }\n      if (typeof blendMode === 'string') {\n        backgroundImageStage.updateBlendMode(blendMode)\n      }\n    } else if (backgroundConfig.type !== 'blur') {\n      // TODO Handle no background in a separate pipeline path\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\n      backgroundImageStage.updateCoverage([0, 0.9999])\n      backgroundImageStage.updateLightWrapping(0)\n    }\n  }\n\n  function cleanUp() {\n    backgroundStage.cleanUp()\n    fastBilateralFilterStage.cleanUp()\n    loadSegmentationStage.cleanUp()\n\n    gl.deleteTexture(personMaskTexture)\n    gl.deleteTexture(segmentationTexture)\n    gl.deleteTexture(inputFrameTexture)\n    gl.deleteBuffer(texCoordBuffer)\n    gl.deleteBuffer(positionBuffer)\n    gl.deleteVertexArray(vertexArray)\n    gl.deleteShader(vertexShader)\n  }\n\n  return { render, sampleInputFrame, updatePostProcessingConfig, cleanUp }\n}\n"]}