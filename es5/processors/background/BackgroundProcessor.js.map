{"version":3,"file":"BackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/BackgroundProcessor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAyC;AACzC,mDAAkD;AAClD,yDAAwD;AACxD,+CAA4D;AAC5D,qCAAuE;AACvE,oCAAgD;AAEhD,6CAMyB;AAkFzB;;GAEG;AACH;IAAkD,uCAAS;IA0BzD,6BAAY,OAAmC;QAA/C,YACE,iBAAO,SAgCR;QAxDS,sBAAgB,GAA4B,IAAI,CAAC;QACjD,mBAAa,GAA6B,IAAI,CAAC;QAC/C,oBAAc,GAA6D,IAAI,CAAC;QAChF,qBAAe,GAAkD,IAAI,CAAC;QAOxE,0BAAoB,GAAe,qCAAyB,CAAC;QAgBnE,IAAI,OAAO,OAAO,CAAC,UAAU,KAAK,QAAQ,EAAE;YAC1C,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACpD;QACD,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACpC,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;YAC3D,UAAU,IAAI,GAAG,CAAC;SACnB;QAED,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,KAAI,CAAC,SAAS,GAAG,OAAO,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;QACjF,KAAI,CAAC,iBAAiB,GAAG,OAAO,OAAO,CAAC,gBAAgB,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,KAAK,CAAC;QAC1G,KAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,mBAAoB,IAAI,KAAI,CAAC,oBAAoB,CAAC;QAEtF,KAAI,CAAC,gBAAgB,GAAG,OAAO,OAAO,CAAC,eAAe,KAAK,QAAQ;YACjE,CAAC,CAAC,OAAO,CAAC,eAAe;YACzB,CAAC,CAAC,CAAC,IAAA,+BAAqB,GAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAE1D,KAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAS,IAAI,gBAAQ,CAAC,MAAM,CAAC;QACtD,KAAI,CAAC,UAAU,GAAG,IAAI,qBAAS,EAAE,CAAC;QAClC,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,KAAI,CAAC,qBAAqB,GAAG,OAAO,eAAe,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnI,KAAI,CAAC,sBAAsB,GAAG,KAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAsC,CAAC;QAC7I,KAAI,CAAC,iBAAiB,GAAG,OAAO,eAAe,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC/H,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAsC,CAAC;QACvG,KAAI,CAAC,eAAe,GAAG,OAAO,OAAO,CAAC,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAC3F,KAAI,CAAC,SAAS,KAAK,gBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,4BAAgB,CAAC,CAAC,CAAC,CAAC,4BAAgB,GAAG,CAAC,CAAC,CAC/E,CAAC;QACF,KAAI,CAAC,WAAW,GAAG,OAAO,eAAe,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACzH,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAsC,CAAC;;IAC7F,CAAC;IAKD,sBAAI,+CAAc;QAHlB;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;QAED;;WAEG;aACH,UAAmB,MAAc;;YAC/B,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,GAAG,CAAC,EAAE;gBAC5C,OAAO,CAAC,IAAI,CAAC,kDAA2C,4BAAgB,iBAAc,CAAC,CAAC;gBACxF,MAAM,GAAG,4BAAgB,CAAC;aAC3B;YACD,IAAI,IAAI,CAAC,eAAe,KAAK,MAAM,EAAE;gBACnC,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;gBAC9B,MAAA,IAAI,CAAC,eAAe,0CAAE,0BAA0B,CAAC;oBAC/C,oBAAoB,EAAE;wBACpB,UAAU,EAAE,IAAI,CAAC,eAAe;qBACjC;iBACF,CAAC,CAAC;aACJ;QACH,CAAC;;;OAlBA;IAoBD;;;;OAIG;IACG,uCAAS,GAAf;;;;;;wBACiB,MAAM,GAAK,mBAAmB,QAAxB,CAAyB;6BAC1C,CAAC,MAAM,EAAP,wBAAO;wBACT,MAAM,GAAG,IAAI,2BAAY,EAAE,CAAC;wBAC5B,qBAAM,MAAM,CAAC,UAAU,CACrB,IAAI,CAAC,WAAW,EAChB,sBAAU,EACV,8BAAkB,EAClB,mCAAuB,CACxB,EAAA;;wBALD,SAKC,CAAC;wBACF,mBAAmB,CAAC,OAAO,GAAG,MAAM,CAAC;;;wBAEvC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,aAAa,CAAC;;;;;KAC5C;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACG,0CAAY,GAAlB,UACE,gBAAwE,EACxE,iBAAoC;;;;;;;wBAEpC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE;4BAChC,sBAAO;yBACR;wBACD,IAAI,CAAC,gBAAgB,IAAI,CAAC,iBAAiB,EAAE;4BAC3C,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;yBACzD;wBACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;wBACzC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;wBAErC,KAGF,IAAI,CAAC,oBAAoB,EAFpB,cAAc,WAAA,EACb,eAAe,YAAA,CACK;wBAExB,KAGF,gBAAgB,YAAY,gBAAgB;4BAC9C,CAAC,CAAC,EAAE,KAAK,EAAE,gBAAgB,CAAC,UAAU,EAAE,MAAM,EAAE,gBAAgB,CAAC,WAAW,EAAE;4BAC9E,CAAC,CAAC,gBAAgB,EAJX,YAAY,WAAA,EACX,aAAa,YAAA,CAGF;wBAErB,IAAI,IAAI,CAAC,aAAa,KAAK,iBAAiB,EAAE;4BAC5C,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC;4BACvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa;iCACrC,UAAU,CAAC,IAAI,CAAC,SAAS,KAAK,gBAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CACjB,CAAC;4BACpD,MAAA,IAAI,CAAC,eAAe,0CAAE,OAAO,EAAE,CAAC;4BAChC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;yBAC7B;wBAED,IAAI,IAAI,CAAC,SAAS,KAAK,gBAAQ,CAAC,MAAM,EAAE;4BACtC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gCACzB,IAAI,CAAC,qBAAqB,CACxB,gBAAoC,EACpC,YAAY,EACZ,aAAa,EACb,cAAc,EACd,eAAe,CAChB,CAAC;6BACH;4BACD,MAAA,IAAI,CAAC,eAAe,0CAAE,gBAAgB,EAAE,CAAC;yBAC1C;wBAED,qFAAqF;wBACrF,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,KAAK,YAAY,EAAE;4BACjD,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,YAAY,CAAC;yBAC7C;wBACD,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,aAAa,EAAE;4BACnD,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,aAAa,CAAC;yBAC/C;wBACD,IAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,KAAK,cAAc,EAAE;4BACvD,IAAI,CAAC,qBAAqB,CAAC,KAAK,GAAG,cAAc,CAAC;4BAClD,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,cAAc,CAAC;yBACzC;wBACD,IAAI,IAAI,CAAC,qBAAqB,CAAC,MAAM,KAAK,eAAe,EAAE;4BACzD,IAAI,CAAC,qBAAqB,CAAC,MAAM,GAAG,eAAe,CAAC;4BACpD,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,eAAe,CAAC;yBAC3C;wBAGD,IAAI,gBAAgB,YAAY,gBAAgB,EAAE;4BAChD,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC1D,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC;yBACrC;6BAAM;4BACL,UAAU,GAAG,gBAAgB,CAAC;yBAC/B;wBAEkB,qBAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAA;;wBAArD,UAAU,GAAG,SAAwC;wBAC3D,IAAI,IAAI,CAAC,SAAS,EAAE;4BAClB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,KAAK,UAAU;gCAClD,CAAC,CAAC,IAAI;gCACN,CAAC,CAAC,UAAU,CAAC;yBAChB;wBAED,IAAI,IAAI,CAAC,SAAS,KAAK,gBAAQ,CAAC,MAAM,EAAE;4BACtC,MAAA,IAAI,CAAC,eAAe,0CAAE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;yBAC/C;6BACI;4BACH,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;4BAC/C,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,EAAE;gCACxC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;6BAClD;4BACK,GAAG,GAAG,IAAI,CAAC,cAA0C,CAAC;4BACtD,KAGF,IAAI,CAAC,aAAa,EAFZ,YAAY,YAAA,EACb,WAAW,WAAA,CACG;4BACvB,GAAG,CAAC,IAAI,EAAE,CAAC;4BACX,GAAG,CAAC,MAAM,GAAG,eAAQ,IAAI,CAAC,eAAe,QAAK,CAAC;4BAC/C,GAAG,CAAC,wBAAwB,GAAG,MAAM,CAAC;4BACtC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;4BACjE,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;4BACpB,GAAG,CAAC,wBAAwB,GAAG,WAAW,CAAC;4BAC3C,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;4BAC3D,GAAG,CAAC,wBAAwB,GAAG,kBAAkB,CAAC;4BAClD,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;4BAChC,GAAG,CAAC,OAAO,EAAE,CAAC;4BACd,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;yBAC9C;wBAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;wBACzC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;wBAE5C,+FAA+F;wBAC/F,0BAA0B;wBAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;wBAC9C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;;;;;KAC5C;IAMa,+CAAiB,GAA/B,UAAgC,UAA+C;;;;;;;wBACvE,KAAoB,IAAI,CAAC,oBAAoB,EAA3C,MAAM,YAAA,EAAE,KAAK,WAAA,CAA+B;wBAC9C,MAAM,GAAG;4BACb,SAAS,EAAE;gCACT,KAAK,EAAE,cAAM,OAAA,mBAAmB,CAAC,OAAQ,CAAC,YAAY,EAAE,EAA3C,CAA2C;gCACxD,IAAI,EAAE,cAAM,OAAA,KAAI,CAAC,YAAa,CAAC,IAAI,EAAvB,CAAuB;6BACpC;4BACD,MAAM,EAAE;gCACN,KAAK,EAAE;oCAAY,sBAAA,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAA;yCAAA;gCACrD,IAAI,EAAE;;yCAA0B;6BACjC;yBACF,CAAC;wBACI,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;wBACrC,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,UAAG,cAAc,CAAE,CAAC,CAAC;wBACvD,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,UAAG,cAAc,CAAE,CAAC,CAAC;wBAEvD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;wBACzC,aAAa,GAAG,WAAW,EAAE,CAAC;6BAChC,CAAC,IAAI,CAAC,iBAAiB,EAAvB,wBAAuB;wBACzB,qBAAM,aAAa,EAAA;;wBAAnB,SAAmB,CAAC;;;wBAEtB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;wBAC7C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;wBACrC,gBAAgB,GAAG,cAAc,EAAE,CAAC;wBAC1C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;wBACzC,sBAAO,IAAI,CAAC,YAAY,IAAI,IAAI,SAAS,CAAC,gBAAgB,EAAE,KAAK,EAAE,MAAM,CAAC,EAAC;;;;KAC5E;IAEO,mDAAqB,GAA7B,UACE,UAA4B,EAC5B,YAAoB,EACpB,aAAqB,EACrB,cAAsB,EACtB,eAAuB;QAEvB,IAAI,CAAC,eAAe,GAAG,IAAA,4BAAmB,EACxC;YACE,WAAW,EAAE,UAAU;YACvB,KAAK,EAAE,YAAY;YACnB,MAAM,EAAE,aAAa;SACtB,EACD,IAAI,CAAC,gBAAgB,EACrB;YACE,IAAI,EAAE,IAAI,CAAC,sBAAsB,EAAE;SACpC,EACD;YACE,eAAe,EAAE,UAAG,cAAc,cAAI,eAAe,CAAE;SACxD,EACD,IAAI,CAAC,aAAc,EACnB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,SAAS,CACf,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,0BAA0B,CAAC;YAC9C,oBAAoB,EAAE;gBACpB,UAAU,EAAE,IAAI,CAAC,eAAe;gBAChC,UAAU,EAAE,GAAG;aAChB;YACD,QAAQ,EAAE;gBACR,CAAC;gBACD,IAAI;aACL;YACD,aAAa,EAAE,CAAC;YAChB,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;IACL,CAAC;IAEa,+CAAiB,GAA/B,UAAgC,UAA+C;;;;;;wBACvE,KAOF,IAAI,EANN,6BAGC,EAFQ,WAAW,WAAA,EACV,YAAY,YAAA,EAEE,GAAG,4BAAA,EACT,UAAU,sBAAA,CACrB;6BACL,CAAA,UAAU,KAAK,cAAc,CAAA,EAA7B,wBAA6B;wBACC,qBAAM,iBAAiB,CAAC,UAAU,EAAE;gCAClE,WAAW,aAAA;gCACX,YAAY,cAAA;gCACZ,aAAa,EAAE,WAAW;6BAC3B,CAAC,EAAA;;wBAJI,uBAAuB,GAAG,SAI9B;wBACF,GAAG,CAAC,SAAS,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;wBACxE,uBAAuB,CAAC,KAAK,EAAE,CAAC;;;wBAEhC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;;;wBAEvD,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;wBACpE,mBAAmB,CAAC,OAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;;;;KAC9D;IA1Uc,2BAAO,GAAwB,IAAI,AAA5B,CAA6B;IA2UrD,0BAAC;CAAA,AA5UD,CAAkD,qBAAS,GA4U1D;AA5UqB,kDAAmB","sourcesContent":["import { Processor } from '../Processor';\nimport { Benchmark } from '../../utils/Benchmark';\nimport { TwilioTFLite } from '../../utils/TwilioTFLite';\nimport { isChromiumImageBitmap } from '../../utils/support';\nimport { Dimensions, Pipeline, WebGL2PipelineType } from '../../types';\nimport { buildWebGL2Pipeline } from '../webgl2';\n\nimport {\n  MASK_BLUR_RADIUS,\n  MODEL_NAME,\n  TFLITE_LOADER_NAME,\n  TFLITE_SIMD_LOADER_NAME,\n  WASM_INFERENCE_DIMENSIONS,\n} from '../../constants';\n\ntype InputResizeMode = 'canvas' | 'image-bitmap';\n\n/**\n * @private\n */\nexport interface BackgroundProcessorOptions {\n  /**\n   * The VideoProcessors load assets dynamically depending on certain browser features.\n   * You need to serve all the assets and provide the root path so they can be referenced properly.\n   * These assets can be copied from the `dist/build` folder which you can add as part of your deployment process.\n   * @example\n   * <br/>\n   * <br/>\n   * For virtual background:\n   * <br/>\n   *\n   * ```ts\n   * const virtualBackground = new VirtualBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets',\n   *   backgroundImage: img,\n   * });\n   * await virtualBackground.loadModel();\n   * ```\n   *\n   * <br/>\n   * For blur background:\n   * <br/>\n   *\n   * ```ts\n   * const blurBackground = new GaussianBlurBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets'\n   * });\n   * await blurBackground.loadModel();\n   * ```\n   */\n  assetsPath: string;\n\n  /**\n   * Whether to skip processing every other frame to improve the output frame rate, but reducing accuracy in the process.\n   * @default\n   * ```html\n   * true\n   * ```\n   */\n  debounce?: boolean;\n\n  /**\n   * @private\n   */\n  deferInputResize?: boolean;\n\n  /**\n   * @private\n   */\n  inferenceDimensions?: Dimensions;\n\n  /**\n   * @private\n   */\n  inputResizeMode?: InputResizeMode;\n\n  /**\n   * The blur radius to use when smoothing out the edges of the person's mask.\n   * @default\n   * ```html\n   * 8 for WebGL2 pipeline, 4 for Canvas2D pipeline\n   * ```\n   */\n  maskBlurRadius?: number;\n\n  /**\n   * Specifies which pipeline to use when processing video frames.\n   * @default\n   * ```html\n   * 'WebGL2'\n   * ```\n   */\n  pipeline?: Pipeline;\n}\n\n/**\n * @private\n */\nexport abstract class BackgroundProcessor extends Processor {\n  private static _tflite: TwilioTFLite | null = null;\n\n  protected _backgroundImage: HTMLImageElement | null = null;\n  protected _outputCanvas: HTMLCanvasElement | null = null;\n  protected _outputContext: CanvasRenderingContext2D | WebGL2RenderingContext | null = null;\n  protected _webgl2Pipeline: ReturnType<typeof buildWebGL2Pipeline> | null = null;\n\n  private _assetsPath: string;\n  private _benchmark: Benchmark;\n  private _currentMask: ImageData | null;\n  private _debounce: boolean;\n  private _deferInputResize: boolean;\n  private _inferenceDimensions: Dimensions = WASM_INFERENCE_DIMENSIONS;\n  private _inferenceInputCanvas: OffscreenCanvas | HTMLCanvasElement;\n  private _inferenceInputContext: OffscreenCanvasRenderingContext2D | CanvasRenderingContext2D;\n  private _inputFrameCanvas: OffscreenCanvas | HTMLCanvasElement;\n  private _inputFrameContext: OffscreenCanvasRenderingContext2D | CanvasRenderingContext2D;\n  private _inputResizeMode: InputResizeMode;\n  // tslint:disable-next-line no-unused-variable\n  private _isSimdEnabled: boolean | null;\n  private _maskBlurRadius: number;\n  private _maskCanvas: OffscreenCanvas | HTMLCanvasElement;\n  private _maskContext: OffscreenCanvasRenderingContext2D | CanvasRenderingContext2D;\n  private _pipeline: Pipeline;\n\n  constructor(options: BackgroundProcessorOptions) {\n    super();\n\n    if (typeof options.assetsPath !== 'string') {\n      throw new Error('assetsPath parameter is missing');\n    }\n    let assetsPath = options.assetsPath;\n    if (assetsPath && assetsPath[assetsPath.length - 1] !== '/') {\n      assetsPath += '/';\n    }\n\n    this._assetsPath = assetsPath;\n    this._debounce = typeof options.debounce === 'boolean' ? options.debounce : true;\n    this._deferInputResize = typeof options.deferInputResize === 'boolean' ? options.deferInputResize : false;\n    this._inferenceDimensions = options.inferenceDimensions! || this._inferenceDimensions;\n\n    this._inputResizeMode = typeof options.inputResizeMode === 'string'\n      ? options.inputResizeMode\n      : (isChromiumImageBitmap() ? 'image-bitmap' : 'canvas');\n\n    this._pipeline = options.pipeline! || Pipeline.WebGL2;\n    this._benchmark = new Benchmark();\n    this._currentMask = null;\n    this._isSimdEnabled = null;\n    this._inferenceInputCanvas = typeof OffscreenCanvas !== 'undefined' ? new OffscreenCanvas(1, 1) : document.createElement('canvas');\n    this._inferenceInputContext = this._inferenceInputCanvas.getContext('2d', { willReadFrequently: true }) as OffscreenCanvasRenderingContext2D;\n    this._inputFrameCanvas = typeof OffscreenCanvas !== 'undefined' ? new OffscreenCanvas(1, 1) : document.createElement('canvas');\n    this._inputFrameContext = this._inputFrameCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    this._maskBlurRadius = typeof options.maskBlurRadius === 'number' ? options.maskBlurRadius : (\n      this._pipeline === Pipeline.WebGL2 ? MASK_BLUR_RADIUS : (MASK_BLUR_RADIUS / 2)\n    );\n    this._maskCanvas = typeof OffscreenCanvas !== 'undefined' ? new OffscreenCanvas(1, 1) : document.createElement('canvas');\n    this._maskContext = this._maskCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n  }\n\n  /**\n   * The current blur radius when smoothing out the edges of the person's mask.\n   */\n  get maskBlurRadius(): number {\n    return this._maskBlurRadius;\n  }\n\n  /**\n   * Set a new blur radius to be used when smoothing out the edges of the person's mask.\n   */\n  set maskBlurRadius(radius: number) {\n    if (typeof radius !== 'number' || radius < 0) {\n      console.warn(`Valid mask blur radius not found. Using ${MASK_BLUR_RADIUS} as default.`);\n      radius = MASK_BLUR_RADIUS;\n    }\n    if (this._maskBlurRadius !== radius) {\n      this._maskBlurRadius = radius;\n      this._webgl2Pipeline?.updatePostProcessingConfig({\n        jointBilateralFilter: {\n          sigmaSpace: this._maskBlurRadius\n        }\n      });\n    }\n  }\n\n  /**\n   * Load the segmentation model.\n   * Call this method before attaching the processor to ensure\n   * video frames are processed correctly.\n   */\n  async loadModel(): Promise<void> {\n    let { _tflite: tflite } = BackgroundProcessor;\n    if (!tflite) {\n      tflite = new TwilioTFLite();\n      await tflite.initialize(\n        this._assetsPath,\n        MODEL_NAME,\n        TFLITE_LOADER_NAME,\n        TFLITE_SIMD_LOADER_NAME,\n      );\n      BackgroundProcessor._tflite = tflite;\n    }\n    this._isSimdEnabled = tflite.isSimdEnabled;\n  }\n\n  /**\n   * Apply a transform to the background of an input video frame and leaving\n   * the foreground (person(s)) untouched. Any exception detected will\n   * result in the frame being dropped.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * <br/>\n   * <br/>\n   * [OffscreenCanvas](https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas) - Good for canvas-related processing\n   * that can be rendered off screen. Only works when using [[Pipeline.Canvas2D]].\n   * <br/>\n   * <br/>\n   * [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) - This is recommended on browsers\n   * that doesn't support `OffscreenCanvas`, or if you need to render the frame on the screen. Only works when using [[Pipeline.Canvas2D]].\n   * <br/>\n   * <br/>\n   * [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement) - Recommended when using [[Pipeline.WebGL2]] but\n   * works for both [[Pipeline.Canvas2D]] and [[Pipeline.WebGL2]].\n   * <br/>\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n  async processFrame(\n    inputFrameBuffer: OffscreenCanvas | HTMLCanvasElement | HTMLVideoElement,\n    outputFrameBuffer: HTMLCanvasElement\n  ): Promise<void> {\n    if (!BackgroundProcessor._tflite) {\n      return;\n    }\n    if (!inputFrameBuffer || !outputFrameBuffer) {\n      throw new Error('Missing input or output frame buffer');\n    }\n    this._benchmark.end('captureFrameDelay');\n    this._benchmark.start('processFrameDelay');\n\n    const {\n      width: inferenceWidth,\n      height: inferenceHeight\n    } = this._inferenceDimensions;\n\n    const {\n      width: captureWidth,\n      height: captureHeight\n    } = inputFrameBuffer instanceof HTMLVideoElement\n      ? { width: inputFrameBuffer.videoWidth, height: inputFrameBuffer.videoHeight }\n      : inputFrameBuffer;\n\n    if (this._outputCanvas !== outputFrameBuffer) {\n      this._outputCanvas = outputFrameBuffer;\n      this._outputContext = this._outputCanvas\n        .getContext(this._pipeline === Pipeline.Canvas2D ? '2d' : 'webgl2') as\n        CanvasRenderingContext2D | WebGL2RenderingContext;\n      this._webgl2Pipeline?.cleanUp();\n      this._webgl2Pipeline = null;\n    }\n\n    if (this._pipeline === Pipeline.WebGL2) {\n      if (!this._webgl2Pipeline) {\n        this._createWebGL2Pipeline(\n          inputFrameBuffer as HTMLVideoElement,\n          captureWidth,\n          captureHeight,\n          inferenceWidth,\n          inferenceHeight\n        );\n      }\n      this._webgl2Pipeline?.sampleInputFrame();\n    }\n\n    // Only set the canvas' dimensions if they have changed to prevent unnecessary redraw\n    if (this._inputFrameCanvas.width !== captureWidth) {\n      this._inputFrameCanvas.width = captureWidth;\n    }\n    if (this._inputFrameCanvas.height !== captureHeight) {\n      this._inputFrameCanvas.height = captureHeight;\n    }\n    if (this._inferenceInputCanvas.width !== inferenceWidth) {\n      this._inferenceInputCanvas.width = inferenceWidth;\n      this._maskCanvas.width = inferenceWidth;\n    }\n    if (this._inferenceInputCanvas.height !== inferenceHeight) {\n      this._inferenceInputCanvas.height = inferenceHeight;\n      this._maskCanvas.height = inferenceHeight;\n    }\n\n    let inputFrame: OffscreenCanvas | HTMLCanvasElement | HTMLVideoElement;\n    if (inputFrameBuffer instanceof HTMLVideoElement) {\n      this._inputFrameContext.drawImage(inputFrameBuffer, 0, 0);\n      inputFrame = this._inputFrameCanvas;\n    } else {\n      inputFrame = inputFrameBuffer;\n    }\n\n    const personMask = await this._createPersonMask(inputFrame);\n    if (this._debounce) {\n      this._currentMask = this._currentMask === personMask\n        ? null\n        : personMask;\n    }\n\n    if (this._pipeline === Pipeline.WebGL2) {\n      this._webgl2Pipeline?.render(personMask.data);\n    }\n    else {\n      this._benchmark.start('imageCompositionDelay');\n      if (!this._debounce || this._currentMask) {\n        this._maskContext.putImageData(personMask, 0, 0);\n      }\n      const ctx = this._outputContext as CanvasRenderingContext2D;\n      const {\n        height: outputHeight,\n        width: outputWidth\n      } = this._outputCanvas;\n      ctx.save();\n      ctx.filter = `blur(${this._maskBlurRadius}px)`;\n      ctx.globalCompositeOperation = 'copy';\n      ctx.drawImage(this._maskCanvas, 0, 0, outputWidth, outputHeight);\n      ctx.filter = 'none';\n      ctx.globalCompositeOperation = 'source-in';\n      ctx.drawImage(inputFrame, 0, 0, outputWidth, outputHeight);\n      ctx.globalCompositeOperation = 'destination-over';\n      this._setBackground(inputFrame);\n      ctx.restore();\n      this._benchmark.end('imageCompositionDelay');\n    }\n\n    this._benchmark.end('processFrameDelay');\n    this._benchmark.end('totalProcessingDelay');\n\n    // NOTE (csantos): Start the benchmark from here so we can include the delay from the Video sdk\n    // for a more accurate fps\n    this._benchmark.start('totalProcessingDelay');\n    this._benchmark.start('captureFrameDelay');\n  }\n\n  protected abstract _getWebGL2PipelineType(): WebGL2PipelineType;\n\n  protected abstract _setBackground(inputFrame?: OffscreenCanvas | HTMLCanvasElement): void;\n\n  private async _createPersonMask(inputFrame: OffscreenCanvas | HTMLCanvasElement): Promise<ImageData> {\n    const { height, width } = this._inferenceDimensions;\n    const stages = {\n      inference: {\n        false: () => BackgroundProcessor._tflite!.runInference(),\n        true: () => this._currentMask!.data\n      },\n      resize: {\n        false: async () => this._resizeInputFrame(inputFrame),\n        true: async () => { /* noop */ }\n      }\n    };\n    const shouldDebounce = !!this._currentMask;\n    const inferenceStage = stages.inference[`${shouldDebounce}`];\n    const resizeStage = stages.resize[`${shouldDebounce}`];\n\n    this._benchmark.start('inputImageResizeDelay');\n    const resizePromise = resizeStage();\n    if (!this._deferInputResize) {\n      await resizePromise;\n    }\n    this._benchmark.end('inputImageResizeDelay');\n    this._benchmark.start('segmentationDelay');\n    const personMaskBuffer = inferenceStage();\n    this._benchmark.end('segmentationDelay');\n    return this._currentMask || new ImageData(personMaskBuffer, width, height);\n  }\n\n  private _createWebGL2Pipeline(\n    inputFrame: HTMLVideoElement,\n    captureWidth: number,\n    captureHeight: number,\n    inferenceWidth: number,\n    inferenceHeight: number,\n  ): void {\n    this._webgl2Pipeline = buildWebGL2Pipeline(\n      {\n        htmlElement: inputFrame,\n        width: captureWidth,\n        height: captureHeight,\n      },\n      this._backgroundImage,\n      {\n        type: this._getWebGL2PipelineType(),\n      },\n      {\n        inputResolution: `${inferenceWidth}x${inferenceHeight}`,\n      },\n      this._outputCanvas!,\n      this._benchmark,\n      this._debounce\n    );\n    this._webgl2Pipeline.updatePostProcessingConfig({\n      jointBilateralFilter: {\n        sigmaSpace: this._maskBlurRadius,\n        sigmaColor: 0.1\n      },\n      coverage: [\n        0,\n        0.99\n      ],\n      lightWrapping: 0,\n      blendMode: 'screen'\n    });\n  }\n\n  private async _resizeInputFrame(inputFrame: OffscreenCanvas | HTMLCanvasElement): Promise<void> {\n    const {\n      _inferenceInputCanvas: {\n        width: resizeWidth,\n        height: resizeHeight\n      },\n      _inferenceInputContext: ctx,\n      _inputResizeMode: resizeMode\n    } = this;\n    if (resizeMode === 'image-bitmap') {\n      const resizedInputFrameBitmap = await createImageBitmap(inputFrame, {\n        resizeWidth,\n        resizeHeight,\n        resizeQuality: 'pixelated'\n      });\n      ctx.drawImage(resizedInputFrameBitmap, 0, 0, resizeWidth, resizeHeight);\n      resizedInputFrameBitmap.close();\n    } else {\n      ctx.drawImage(inputFrame, 0, 0, resizeWidth, resizeHeight);\n    }\n    const imageData = ctx.getImageData(0, 0, resizeWidth, resizeHeight);\n    BackgroundProcessor._tflite!.loadInputBuffer(imageData.data);\n  }\n}\n"]}